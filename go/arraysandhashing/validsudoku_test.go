package arraysandhashing

import (
	"fmt"
	"testing"
)

func TestValidSudoku(t *testing.T) {
	testCases := []struct {
		input [][]string
		want  bool
	}{
		{
			input: [][]string{
				{"5", "3", ".", ".", "7", ".", ".", ".", "."},
				{"6", ".", ".", "1", "9", "5", ".", ".", "."},
				{".", "9", "8", ".", ".", ".", ".", "6", "."},
				{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
				{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
				{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
				{".", "6", ".", ".", ".", ".", "2", "8", "."},
				{".", ".", ".", "4", "1", "9", ".", ".", "5"},
				{".", ".", ".", ".", "8", ".", ".", "7", "9"},
			},
			want: true,
		},
		{
			input: [][]string{
				{"8", "3", ".", ".", "7", ".", ".", ".", "."},
				{"6", ".", ".", "1", "9", "5", ".", ".", "."},
				{".", "9", "8", ".", ".", ".", ".", "6", "."},
				{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
				{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
				{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
				{".", "6", ".", ".", ".", ".", "2", "8", "."},
				{".", ".", ".", "4", "1", "9", ".", ".", "5"},
				{".", ".", ".", ".", "8", ".", ".", "7", "9"},
			},
			want: false,
		},
		{
			input: [][]string{
				{".", ".", ".", ".", "5", ".", ".", "1", "."},
				{".", "4", ".", "3", ".", ".", ".", ".", "."},
				{".", ".", ".", ".", ".", "3", ".", ".", "1"},
				{"8", ".", ".", ".", ".", ".", ".", "2", "."},
				{".", ".", "2", ".", "7", ".", ".", ".", "."},
				{".", "1", "5", ".", ".", ".", ".", ".", "."},
				{".", ".", ".", ".", ".", "2", ".", ".", "."},
				{".", "2", ".", "9", ".", ".", ".", ".", "."},
				{".", ".", "4", ".", ".", ".", ".", ".", "."},
			},
			want: false,
		},
	}

	for i, testCase := range testCases {
		t.Run(fmt.Sprintf("test %d", i+1), func(t *testing.T) {
			got := isValidSudoku(toBytes(testCase.input))
			if got != testCase.want {
				t.Errorf("got %v, want %v", got, testCase.want)
			}
		})
	}
}

func toBytes(strArr [][]string) [][]byte {
	byteArr := make([][]byte, len(strArr))

	for i := range strArr {
		byteArr[i] = make([]byte, len(strArr[i]))
		for j := range strArr[i] {
			byteArr[i][j] = strArr[i][j][0]
		}
	}

	return byteArr
}
